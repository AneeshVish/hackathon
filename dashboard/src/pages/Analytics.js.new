import React, { useState } from 'react';
import {
  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend,
  ResponsiveContainer, LineChart, Line, PieChart, Pie, Cell,
  Scatter, ComposedChart, Area, RadialBarChart, RadialBar,
  ReferenceLine, LabelList
} from 'recharts';
import {
  ChartBarIcon, CpuChipIcon, ClockIcon, CheckCircleIcon,
  ExclamationTriangleIcon, ArrowTrendingUpIcon, UserGroupIcon,
  ScaleIcon, HeartIcon, BeakerIcon
} from '@heroicons/react/24/solid';
import {
  trainedModelMetrics, trainedConfusionMatrix, trainedFeatureImportance,
  trainedCalibrationData, trainedModelHistory, trainedPatientPredictions
} from '../data/trainedModelData';

// Format numbers with commas
const formatNumber = (num) => {
  return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
};

// Calculate model statistics
const calculateModelStats = (predictions) => {
  const total = predictions.length;
  const highRisk = predictions.filter(p => p.risk_bucket === 'High').length;
  const mediumRisk = predictions.filter(p => p.risk_bucket === 'Medium').length;
  const lowRisk = predictions.filter(p => p.risk_bucket === 'Low').length;
  
  return {
    totalPatients: total,
    highRisk,
    mediumRisk,
    lowRisk,
    highRiskPct: Math.round((highRisk / total) * 100),
    mediumRiskPct: Math.round((mediumRisk / total) * 100),
    lowRiskPct: Math.round((lowRisk / total) * 100)
  };
};

const Analytics = () => {
  const [selectedTimeframe, setSelectedTimeframe] = useState('30d');
  const [activeTab, setActiveTab] = useState('overview');

  // Use trained model metrics
  const modelMetrics = trainedModelMetrics;

  // Use trained model feature importance
  const featureImportance = trainedFeatureImportance.map(item => ({
    ...item,
    category: 'Clinical'
  }));

  // Use trained model history
  const trainingHistory = trainedModelHistory;

  // Prediction Distribution with realistic data
  const predictionDistribution = [
    { range: '0-20%', count: 145, color: '#10b981' },
    { range: '20-40%', count: 89, color: '#3b82f6' },
    { range: '40-60%', count: 67, color: '#f59e0b' },
    { range: '60-80%', count: 43, color: '#ef4444' },
    { range: '80-100%', count: 28, color: '#dc2626' }
  ];

  // Performance over time data
  const performanceOverTime = [
    { date: '2024-01', accuracy: 0.87, auc: 0.92, precision: 0.85, recall: 0.89 },
    { date: '2024-02', accuracy: 0.88, auc: 0.93, precision: 0.86, recall: 0.90 },
    { date: '2024-03', accuracy: 0.89, auc: 0.94, precision: 0.87, recall: 0.91 },
    { date: '2024-04', accuracy: 0.90, auc: 0.95, precision: 0.88, recall: 0.92 },
    { date: '2024-05', accuracy: 0.91, auc: 0.96, precision: 0.89, recall: 0.93 },
    { date: '2024-06', accuracy: 0.92, auc: 0.97, precision: 0.90, recall: 0.94 }
  ];

  // Risk category distribution
  const riskCategories = [
    { name: 'Low Risk', value: 234, color: '#10b981' },
    { name: 'Medium Risk', value: 156, color: '#f59e0b' },
    { name: 'High Risk', value: 71, color: '#ef4444' },
    { name: 'Critical Risk', value: 28, color: '#dc2626' }
  ];

  // Use trained calibration data
  const calibrationData = trainedCalibrationData;

  // Tab navigation
  const tabs = [
    { id: 'overview', name: 'Overview' },
    { id: 'performance', name: 'Model Performance' },
    { id: 'predictions', name: 'Predictions' }
  ];

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="sm:flex sm:items-center sm:justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Analytics Dashboard</h1>
          <p className="mt-1 text-sm text-gray-500">
            Comprehensive model performance and prediction analytics
          </p>
        </div>
        <div className="mt-4 sm:mt-0 flex space-x-3">
          <select
            value={selectedTimeframe}
            onChange={(e) => setSelectedTimeframe(e.target.value)}
            className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm rounded-md"
          >
            <option value="7d">Last 7 days</option>
            <option value="30d">Last 30 days</option>
            <option value="90d">Last 90 days</option>
            <option value="1y">Last year</option>
          </select>
          <button
            type="button"
            className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
          >
            Export Report
          </button>
        </div>
      </div>

      {/* Tabs */}
      <div className="border-b border-gray-200">
        <nav className="-mb-px flex space-x-8">
          {tabs.map((tab) => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              className={`${activeTab === tab.id
                ? 'border-primary-500 text-primary-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm`}
            >
              {tab.name}
            </button>
          ))}
        </nav>
      </div>

      {/* Tab Content */}
      <div className="space-y-6">
        {activeTab === 'overview' && (
          <>
            {/* Key Metrics */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <div className="bg-white p-6 rounded-2xl shadow-lg border border-gray-100">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-600">AUC-ROC</p>
                    <p className="text-3xl font-bold text-blue-600">{(modelMetrics.auc * 100).toFixed(1)}%</p>
                  </div>
                  <div className="p-3 bg-blue-100 rounded-lg">
                    <ChartBarIcon className="h-6 w-6 text-blue-600" />
                  </div>
                </div>
                <div className="mt-4">
                  <div className="flex items-center text-sm text-green-600">
                    <CheckCircleIcon className="h-4 w-4 mr-1" />
                    Excellent discrimination
                  </div>
                </div>
              </div>

              <div className="bg-white p-6 rounded-2xl shadow-lg border border-gray-100">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-600">Accuracy</p>
                    <p className="text-3xl font-bold text-green-600">{(modelMetrics.accuracy * 100).toFixed(1)}%</p>
                  </div>
                  <div className="p-3 bg-green-100 rounded-lg">
                    <CheckCircleIcon className="h-6 w-6 text-green-600" />
                  </div>
                </div>
                <div className="mt-4">
                  <div className="flex items-center text-sm text-green-600">
                    <CheckCircleIcon className="h-4 w-4 mr-1" />
                    High accuracy
                  </div>
                </div>
              </div>

              <div className="bg-white p-6 rounded-2xl shadow-lg border border-gray-100">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-600">Precision</p>
                    <p className="text-3xl font-bold text-purple-600">{(modelMetrics.precision * 100).toFixed(1)}%</p>
                  </div>
                  <div className="p-3 bg-purple-100 rounded-lg">
                    <BeakerIcon className="h-6 w-6 text-purple-600" />
                  </div>
                </div>
                <div className="mt-4">
                  <div className="flex items-center text-sm text-green-600">
                    <CheckCircleIcon className="h-4 w-4 mr-1" />
                    Low false positives
                  </div>
                </div>
              </div>

              <div className="bg-white p-6 rounded-2xl shadow-lg border border-gray-100">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-600">Recall</p>
                    <p className="text-3xl font-bold text-orange-600">{(modelMetrics.recall * 100).toFixed(1)}%</p>
                  </div>
                  <div className="p-3 bg-orange-100 rounded-lg">
                    <CpuChipIcon className="h-6 w-6 text-orange-600" />
                  </div>
                </div>
                <div className="mt-4">
                  <div className="flex items-center text-sm text-green-600">
                    <CheckCircleIcon className="h-4 w-4 mr-1" />
                    Good sensitivity
                  </div>
                </div>
              </div>
            </div>

            {/* Model Information */}
            <div className="bg-white p-6 rounded-2xl shadow-lg border border-gray-100">
              <h3 className="text-xl font-bold text-gray-900 mb-6">Model Information</h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div className="space-y-4">
                  <h4 className="font-semibold text-gray-900">Model Type</h4>
                  <p className="text-gray-600">Random Forest Classifier</p>
                  <p className="text-sm text-gray-500">Ensemble method with 100 estimators</p>
                </div>
                <div className="space-y-4">
                  <h4 className="font-semibold text-gray-900">Training Data</h4>
                  <p className="text-gray-600">240+ Features</p>
                  <p className="text-sm text-gray-500">30-180 day aggregated patient data</p>
                </div>
                <div className="space-y-4">
                  <h4 className="font-semibold text-gray-900">Last Updated</h4>
                  <p className="text-gray-600">2 hours ago</p>
                  <p className="text-sm text-gray-500">Automatic retraining scheduled</p>
                </div>
              </div>
            </div>
          </>
        )}

        {activeTab === 'performance' && (
          <div className="space-y-6">
            {/* Model Training History */}
            <div className="bg-white p-6 rounded-2xl shadow-lg border border-gray-100">
              <h3 className="text-xl font-bold text-gray-900 mb-4">Model Training History</h3>
              <ResponsiveContainer width="100%" height={400}>
                <LineChart data={trainingHistory}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="epoch" />
                  <YAxis domain={[0, 1]} />
                  <Tooltip 
                    formatter={(value) => (value * 100).toFixed(1) + '%'}
                    contentStyle={{ 
                      backgroundColor: 'white', 
                      border: '1px solid #e2e8f0', 
                      borderRadius: '12px',
                      boxShadow: '0 10px 25px -5px rgba(0, 0, 0, 0.1)'
                    }}
                  />
                  <Line 
                    type="monotone" 
                    dataKey="trainAcc" 
                    stroke="#3b82f6" 
                    strokeWidth={2} 
                    name="Training Accuracy" 
                  />
                  <Line 
                    type="monotone" 
                    dataKey="valAcc" 
                    stroke="#ef4444" 
                    strokeWidth={2} 
                    name="Validation Accuracy" 
                  />
                  <Legend />
                </LineChart>
              </ResponsiveContainer>
            </div>

            {/* Feature Importance and Confusion Matrix */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Feature Importance */}
              <div className="bg-white p-6 rounded-2xl shadow-lg border border-gray-100">
                <h3 className="text-xl font-bold text-gray-900 mb-4">Feature Importance</h3>
                <ResponsiveContainer width="100%" height={300}>
                  <BarChart 
                    data={[...featureImportance].sort((a, b) => b.importance - a.importance).slice(0, 10)} 
                    layout="horizontal"
                  >
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis type="number" domain={[0, 0.2]} />
                    <YAxis dataKey="feature" type="category" width={120} fontSize={12} />
                    <Tooltip 
                      formatter={(value) => [`${(value * 100).toFixed(1)}%`, 'Importance']}
                      contentStyle={{ 
                        backgroundColor: 'white', 
                        border: '1px solid #e2e8f0', 
                        borderRadius: '12px',
                        boxShadow: '0 10px 25px -5px rgba(0, 0, 0, 0.1)'
                      }}
                    />
                    <Bar dataKey="importance" fill="#3b82f6" radius={[0, 4, 4, 0]} />
                  </BarChart>
                </ResponsiveContainer>
              </div>

              {/* Confusion Matrix */}
              <div className="bg-white p-6 rounded-2xl shadow-lg border border-gray-100">
                <h3 className="text-xl font-bold text-gray-900 mb-4">Confusion Matrix</h3>
                <div className="grid grid-cols-2 gap-4">
                  <div className="text-center p-4 bg-gray-50 rounded-lg">
                    <div className="text-2xl font-bold text-green-600">{trainedConfusionMatrix.truePositive}</div>
                    <div className="text-sm text-gray-600">True Positives</div>
                  </div>
                  <div className="text-center p-4 bg-gray-50 rounded-lg">
                    <div className="text-2xl font-bold text-red-600">{trainedConfusionMatrix.falsePositive}</div>
                    <div className="text-sm text-gray-600">False Positives</div>
                  </div>
                  <div className="text-center p-4 bg-gray-50 rounded-lg">
                    <div className="text-2xl font-bold text-green-600">{trainedConfusionMatrix.trueNegative}</div>
                    <div className="text-sm text-gray-600">True Negatives</div>
                  </div>
                  <div className="text-center p-4 bg-gray-50 rounded-lg">
                    <div className="text-2xl font-bold text-red-600">{trainedConfusionMatrix.falseNegative}</div>
                    <div className="text-sm text-gray-600">False Negatives</div>
                  </div>
                </div>
                <div className="mt-4 p-4 bg-blue-50 rounded-lg">
                  <div className="text-sm text-blue-800">
                    <strong>Accuracy:</strong> {(modelMetrics.accuracy * 100).toFixed(1)}% | 
                    <strong>Precision:</strong> {(modelMetrics.precision * 100).toFixed(1)}% | 
                    <strong>Recall:</strong> {(modelMetrics.recall * 100).toFixed(1)}%
                  </div>
                </div>
              </div>
            </div>

            {/* Model Calibration */}
            <div className="bg-white p-6 rounded-2xl shadow-lg border border-gray-100">
              <h3 className="text-xl font-bold text-gray-900 mb-4">Model Calibration</h3>
              <p className="text-sm text-gray-600 mb-4">Comparison between predicted probabilities and observed outcomes</p>
              <ResponsiveContainer width="100%" height={300}>
                <ComposedChart data={calibrationData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="predicted" name="Predicted Probability" domain={[0, 1]} />
                  <YAxis dataKey="observed" name="Observed Frequency" domain={[0, 1]} />
                  <Tooltip 
                    formatter={(value, name) => [value.toFixed(3), name === 'observed' ? 'Observed' : 'Ideal']}
                    contentStyle={{ 
                      backgroundColor: 'white', 
                      border: '1px solid #e2e8f0', 
                      borderRadius: '12px',
                      boxShadow: '0 10px 25px -5px rgba(0, 0, 0, 0.1)'
                    }}
                  />
                  <Scatter dataKey="observed" fill="#3b82f6" name="Observed" />
                  <Line 
                    type="monotone" 
                    dataKey="predicted" 
                    stroke="#ef4444" 
                    strokeWidth={2} 
                    strokeDasharray="5 5" 
                    name="Perfect Calibration" 
                  />
                  <Legend />
                </ComposedChart>
              </ResponsiveContainer>
            </div>
          </div>
        )}

        {activeTab === 'predictions' && (
          <div className="space-y-6">
            {/* Risk Distribution and Categories */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Risk Score Distribution */}
              <div className="bg-white p-6 rounded-2xl shadow-lg border border-gray-100">
                <h3 className="text-xl font-bold text-gray-900 mb-4">Risk Score Distribution</h3>
                <ResponsiveContainer width="100%" height={300}>
                  <BarChart data={predictionDistribution}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="range" />
                    <YAxis />
                    <Tooltip 
                      contentStyle={{ 
                        backgroundColor: 'white', 
                        border: '1px solid #e2e8f0', 
                        borderRadius: '12px',
                        boxShadow: '0 10px 25px -5px rgba(0, 0, 0, 0.1)'
                      }}
                    />
                    <Bar dataKey="count">
                      {predictionDistribution.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={entry.color} />
                      ))}
                    </Bar>
                  </BarChart>
                </ResponsiveContainer>
              </div>

              {/* Patient Risk Categories */}
              <div className="bg-white p-6 rounded-2xl shadow-lg border border-gray-100">
                <h3 className="text-xl font-bold text-gray-900 mb-4">Patient Risk Categories</h3>
                <ResponsiveContainer width="100%" height={300}>
                  <PieChart>
                    <Pie
                      data={riskCategories}
                      cx="50%"
                      cy="50%"
                      labelLine={false}
                      label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                      outerRadius={80}
                      fill="#8884d8"
                      dataKey="value"
                    >
                      {riskCategories.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={entry.color} />
                      ))}
                    </Pie>
                    <Tooltip 
                      formatter={(value, name, props) => [value, name]}
                      contentStyle={{ 
                        backgroundColor: 'white', 
                        border: '1px solid #e2e8f0', 
                        borderRadius: '12px',
                        boxShadow: '0 10px 25px -5px rgba(0, 0, 0, 0.1)'
                      }}
                    />
                    <Legend />
                  </PieChart>
                </ResponsiveContainer>
              </div>
            </div>

            {/* Recent Predictions */}
            <div className="bg-white p-6 rounded-2xl shadow-lg border border-gray-100">
              <h3 className="text-xl font-bold text-gray-900 mb-4">Recent Predictions</h3>
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Patient ID</th>
                      <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Risk Score</th>
                      <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Risk Level</th>
                      <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                      <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {trainedPatientPredictions.slice(0, 5).map((prediction, index) => (
                      <tr key={index} className={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                          {prediction.patient_id}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          <div className="w-full bg-gray-200 rounded-full h-2.5">
                            <div 
                              className={`h-2.5 rounded-full ${
                                prediction.risk_score < 0.3 ? 'bg-green-500' : 
                                prediction.risk_score < 0.7 ? 'bg-yellow-500' : 'bg-red-500'
                              }`} 
                              style={{ width: `${prediction.risk_score * 100}%` }}
                            />
                          </div>
                          <span className="mt-1 block text-xs text-gray-500">
                            {(prediction.risk_score * 100).toFixed(1)}%
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                            prediction.risk_bucket === 'Low' ? 'bg-green-100 text-green-800' :
                            prediction.risk_bucket === 'Medium' ? 'bg-yellow-100 text-yellow-800' :
                            'bg-red-100 text-red-800'
                          }`}>
                            {prediction.risk_bucket}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {new Date(prediction.prediction_date).toLocaleDateString()}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {prediction.status === 'Reviewed' ? (
                            <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                              Reviewed
                            </span>
                          ) : (
                            <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800">
                              Pending Review
                            </span>
                          )}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
              <div className="mt-4 flex justify-end">
                <button className="text-sm font-medium text-primary-600 hover:text-primary-800">
                  View all predictions →
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default Analytics;
